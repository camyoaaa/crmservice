#!/usr/bin/env node

/**
 * Module dependencies.
 */

// res.header("Access-Control-Allow-Origin", "*");
//   res.header("Access-Control-Allow-Headers", "Authorization,Content-Type");
//   res.header("Access-Control-Allow-Methods", "PUT,POST,GET,DELETE,OPTIONS");
//   res.header("X-Powered-By", " 3.2.1");
//   res.sendFile(path.join(__dirname, '../public/index.html'));

var app = require("../app");
var debug = require("debug")("crmservice:server");
var http = require("http");
// var https = require('https');
var fs = require('fs');
var path = require('path');
var socketManager = require('../socketManger');

// var options = {

//   key: fs.readFileSync(path.join(__dirname, '../httpsCA/server.key')),
//   cert: fs.readFileSync(path.join(__dirname, '../httpsCA/server.crt'))
// }
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
// var server = https.createServer(options, app);

/**
 * Create Websockct server.
 */
var io = require("socket.io")(server);
global.systemSocketIo = {}; //用于存储所有连接进来的socket
global.userSocketIo = {}; //用于存储所有连接进来的socket



io.on("connection", function (socket) {
  console.log(" a new systemSocket coming");
  socketManager.addSocket(socket, 'system');
});

io.of("/user").on("connection", function (socket) {
  console.log(" a new userSocket coming");
  socketManager.addSocket(socket, 'user');
  global.userSocketIo[socket.handshake.query.userid] = socket;
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}